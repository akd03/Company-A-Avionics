from pymavlink import mavutil
from simple_pid import PID
import time

class PIDController:
    def __init__(self, p_gain,i_gain,d_gain):
        self.p_gain=p_gain
        self.i_gain=i_gain
        self.d_gain=d_gain
        self.previous_error=0
        self.integral=0

    def update(self,error,dt):
        self.integral +=error*dt
        derivative=(error-self.previous_error)/dt
        output=(self.p_gain*error)+(self.i_gain*self.integral)
        self.previous_error=error
        return output
    
def connect_to_fc(connection_string):
    master=mavutil.mavlink_connection('tcp:127.0.0.1:5762')
    master.wait_heartbeat()
    return master
    
def get_altitude(master):
    master.mav.request_data_stream_send(master.target_system, master.target_component,

                                    mavutil.mavlink.MAV_DATA_STREAM_EXTENDED_STATUS, 1, 1)
    while True:
        msg=master.recv_match(type='ATTITUDE',blocking=True)

        if msg:
            return msg.pitch, msg.yaw, msg.roll
        else:
            return None, None, None
            
def set_servo_pwm(master, channel, pwm):
    if not 1000<= pwm <=2000:
        raise ValueError("PWM value must be between 1000 and 2000")
    master.mav.command_long_send(
        master.target_system, master.target_component,
        mavutil.mavlink.MAV_CMD_DO_SET_SERVO, 0,
        channel,pwm,0,0,0,0,0,
    )

def main():
    master= connect_to_fc('tcp:127.0.0.1:5762')

    pid=PIDController(p_gain=-2,i_gain=-5,d_gain=-0.005)
    desired_altitude=100

    while True:
        current_altitude=get_altitude(master)
        error=desired_altitude-current_altitude
        pid_output=pid.update(error,0.1)

        pwm_value=max(min(1500+pid_output,2000),1000)
        set_servo_pwm(master,2,pwm_value)
        
        time.sleep(0.1)

if __name__ =="__main__":
    main()

    
